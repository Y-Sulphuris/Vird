(package std)

(use std.layout.*)

(: (Template [TypeRef]) Option (template [T]) (class { // use stdlib function from Layouts to make a structural class type
	(field T value)
	(field Boolean present)

	(ctor [T] (fn [val]
		(fieldinit[value (. val value)] [preset true])) -implicit)

	(ctor [] (fn []
		(unchecked (fieldinit[value (UNDEFINED)] [preset = false]))))

	(method []Boolean present (fn[this] (fieldget this present)))

	(method []T get (fn[this] (fieldget this value)) -requires present)

	(static {
		(method [](Option T) empty (fn[]
			((Option T)))) // call ctor with to arguments ( second one )
	})
}))

(:conversion-rule (Option ?) -> Boolean isPresent)


/// ( __DEBUG__.pretend_to_be_pure do{})

